generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  watchlists    Watchlist[]

  following     Following[] @relation("UserFollows")
  followers     Following[] @relation("UserFollowedBy")
}

model Movie {
  id            String      @id @default(cuid())
  tmdbId        Int         @unique
  mediaType     String
  title         String
  releaseDate   String?
  tmdbRating    Float?
  genres        String?
  overview      String?
  posterImage   String?
  backdropImage String?
  watchlists    Watchlist[]
}

model Watchlist {
  id          String   @id @default(cuid())
  watchStatus String?
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  tmdbId      Int
  movie       Movie    @relation(fields: [tmdbId], references: [tmdbId])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, tmdbId])
}

model Following {
  id          String   @id @default(cuid())
  followerId  String   // ID of the user who is following
  followingId String   // ID of the user being followed
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  following   User     @relation("UserFollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Ensures unique combinations of follower and following
}